{"ast":null,"code":"import{useState,useCallback,useEffect,useRef}from'react';export const useQRScanner=()=>{const[isScanning,setIsScanning]=useState(false);const[lastScannedCode,setLastScannedCode]=useState(null);const[error,setError]=useState(null);// Usar refs para mantener el estado entre renders\nconst bufferRef=useRef('');const timeoutIdRef=useRef(null);const handleKeyPress=useCallback(event=>{if(!isScanning)return;// Si es un enter, procesamos el código\nif(event.key==='Enter'&&bufferRef.current.length>0){setLastScannedCode(bufferRef.current);bufferRef.current='';}else{// Añadimos el carácter al buffer\nbufferRef.current+=event.key;// Limpiamos cualquier timeout existente\nif(timeoutIdRef.current){clearTimeout(timeoutIdRef.current);}// Establecemos un nuevo timeout\ntimeoutIdRef.current=setTimeout(()=>{bufferRef.current='';},100);}},[isScanning]);const startScanning=useCallback(()=>{setIsScanning(true);setError(null);bufferRef.current='';if(timeoutIdRef.current){clearTimeout(timeoutIdRef.current);}window.addEventListener('keypress',handleKeyPress);},[handleKeyPress]);const stopScanning=useCallback(()=>{setIsScanning(false);if(timeoutIdRef.current){clearTimeout(timeoutIdRef.current);}bufferRef.current='';window.removeEventListener('keypress',handleKeyPress);},[handleKeyPress]);useEffect(()=>{// Cleanup on unmount\nreturn()=>{if(timeoutIdRef.current){clearTimeout(timeoutIdRef.current);}window.removeEventListener('keypress',handleKeyPress);};},[handleKeyPress]);return{isScanning,startScanning,stopScanning,lastScannedCode,error};};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}