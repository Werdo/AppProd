# Configuración básica
LogLevel warn
PageLogFormat
MaxLogSize 0
SystemGroup lpadmin
ServerAlias *

# Listen on all interfaces
Port 631
Listen /var/run/cups/cups.sock

# Configuración de acceso web
WebInterface Yes

# Configuración de políticas por defecto
<Location />
  Order allow,deny
  Allow @LOCAL
</Location>

<Location /admin>
  Order allow,deny
  Allow @LOCAL
</Location>

<Location /admin/conf>
  AuthType Default
  Require user @SYSTEM
  Order allow,deny
  Allow @LOCAL
</Location>

# Configuración de políticas de impresora
<Policy default>
  JobPrivateAccess default
  JobPrivateValues default
  SubscriptionPrivateAccess default
  SubscriptionPrivateValues default

  <Limit Create-Job Print-Job Print-URI Validate-Job>
    Order deny,allow
    Allow @LOCAL
  </Limit>

  <Limit Send-Document Send-URI Hold-Job Release-Job Restart-Job Purge-Jobs Set-Job-Attributes Create-Job-Subscription Renew-Subscription Cancel-Subscription Get-Notifications Reprocess-Job Cancel-Current-Job Suspend-Current-Job Resume-Job Cancel-My-Jobs Close-Job CUPS-Move-Job CUPS-Get-Document>
    Require user @OWNER @SYSTEM
    Order deny,allow
    Allow @LOCAL
  </Limit>

  <Limit CUPS-Add-Modify-Printer CUPS-Delete-Printer CUPS-Add-Modify-Class CUPS-Delete-Class CUPS-Set-Default CUPS-Get-Devices>
    AuthType Default
    Require user @SYSTEM
    Order deny,allow
    Allow @LOCAL
  </Limit>
</Policy>
```

### docker/backend/Dockerfile
```dockerfile
# Etapa de construcción
FROM python:3.11-slim as builder

WORKDIR /app

# Instalar dependencias del sistema
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Instalar dependencias de Python
COPY requirements requirements/
RUN pip install --no-cache-dir -r requirements/prod.txt

# Etapa final
FROM python:3.11-slim

WORKDIR /app

# Copiar dependencias compiladas
COPY --from=builder /usr/local/lib/python3.11/site-packages/ /usr/local/lib/python3.11/site-packages/

# Instalar dependencias del sistema en tiempo de ejecución
RUN apt-get update && apt-get install -y \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# Copiar código fuente
COPY . .

# Script de inicio
COPY scripts/start.sh .
RUN chmod +x start.sh

# Variables de entorno
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1

# Puerto
EXPOSE 8000

# Comando de inicio
CMD ["./start.sh"]
```

### docker/frontend/Dockerfile
```dockerfile
# Etapa de construcción
FROM node:18-alpine as build

WORKDIR /app

# Instalar dependencias
COPY package*.json ./
RUN npm ci

# Copiar código fuente
COPY . .

# Construir aplicación
RUN npm run build

# Etapa de producción
FROM nginx:alpine

# Copiar archivos de construcción
COPY --from=build /app/dist /usr/share/nginx/html

# Copiar configuración de nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Exponer puerto
EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
```

### docker/database/Dockerfile
```dockerfile
FROM postgres:15-alpine

# Variables de entorno por defecto
ENV POSTGRES_DB=production_db
ENV POSTGRES_USER=production_user
ENV POSTGRES_PASSWORD=production_password

# Copiar scripts de inicialización
COPY init.sql /docker-entrypoint-initdb.d/

# Configuración personalizada de PostgreSQL
COPY postgresql.conf /etc/postgresql/postgresql.conf
COPY pg_hba.conf /etc/postgresql/pg_hba.conf

# Configurar volumen de datos
VOLUME /var/lib/postgresql/data